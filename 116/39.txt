39. Longest Palindromic Subsequence.
source code:
def longest_palindromic_subsequence(string):
    n = len(string)
    # create a 2D list to store the length of the longest palindromic subsequence for each substring
    dp = [[0 for j in range(n)] for i in range(n)]
    # every substring of length 1 is a palindrome of length 1
    for i in range(n):
        dp[i][i] = 1
    # loop over substrings of increasing length
    for length in range(2, n+1):
        for i in range(n-length+1):
            j = i + length - 1
            # if the first and last characters of the substring match, add 2 to the length of the longest palindromic subsequence
            if string[i] == string[j]:
                dp[i][j] = dp[i+1][j-1] + 2
            # otherwise, take the maximum of the longest palindromic subsequences of the two substrings obtained by removing the first or last character
            else:
                dp[i][j] = max(dp[i+1][j], dp[i][j-1])
    # the longest palindromic subsequence of the entire string is stored in dp[0][n-1]
    return dp[0][n-1]
    
# example usage
print(longest_palindromic_subsequence("character"))  # output: 5
