52. Find the largest kxk submatrix with all entries 1 in a mxn binary matrix.
source code:
def largest_submatrix(matrix, k):
    m, n = len(matrix), len(matrix[0])
    dp = [[0] * n for _ in range(m)]
    max_size = 0
    
    # Fill the first row and column of dp table
    for i in range(m):
        dp[i][0] = matrix[i][0]
        max_size = max(max_size, dp[i][0])
        
    for j in range(n):
        dp[0][j] = matrix[0][j]
        max_size = max(max_size, dp[0][j])
    
    # Fill the rest of the dp table and update max_size accordingly
    for i in range(1, m):
        for j in range(1, n):
            if matrix[i][j] == 1:
                dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1
                max_size = max(max_size, dp[i][j])
                
    return max_size if max_size <= k else k


# Example usage
matrix = [
    [1, 1, 1, 1, 0],
    [1, 1, 1, 1, 0],
    [1, 1, 1, 0, 0],
    [0, 1, 1, 0, 0],
    [0, 1, 0, 0, 0]
]
k = 3
largest_size = largest_submatrix(matrix, k)
print(f"Largest {k}x{k} submatrix with all entries 1 has size {largest_size}")

output:
Largest 3x3 submatrix with all entries 1 has size 3
