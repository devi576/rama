Egg Drop Problem

source code:

def egg_drop(n, k):
    # Create a 2D array to store the minimum number of trials
    # needed to find the critical floor for the given number of
    # eggs and floors
    dp = [[0 for _ in range(k+1)] for _ in range(n+1)]

    # Base case: If there is only one egg, then the minimum
    # number of trials needed is equal to the number of floors
    for i in range(1, k+1):
        dp[1][i] = i

    # Base case: If there is only one floor, then the minimum
    # number of trials needed is equal to one
    for i in range(1, n+1):
        dp[i][1] = 1

    # Fill the rest of the table using dynamic programming
    for i in range(2, n+1):
        for j in range(2, k+1):
            dp[i][j] = float('inf')
            for x in range(1, j+1):
                res = 1 + max(dp[i-1][x-1], dp[i][j-x])
                dp[i][j] = min(dp[i][j], res)

    # The answer is the minimum number of trials needed to find
    # the critical floor for the given number of eggs and floors
    return dp[n][k]
