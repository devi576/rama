0/1 Knapsack Problem

source code:

def knapsack(capacity, weights, values, n):
    """
    A function that solves the 0/1 Knapsack Problem using dynamic programming.

    :param capacity: The maximum weight that the knapsack can hold.
    :param weights: A list of weights of n items.
    :param values: A list of values of n items.
    :param n: The number of items.
    :return: The maximum value that can be obtained by filling the knapsack.
    """
    # Create a table to store the maximum values that can be obtained for different capacities
    table = [[0 for _ in range(capacity + 1)] for _ in range(n + 1)]

    # Fill the table using dynamic programming
    for i in range(1, n + 1):
        for w in range(1, capacity + 1):
            if weights[i - 1] > w:
                table[i][w] = table[i - 1][w]
            else:
                table[i][w] = max(table[i - 1][w], values[i - 1] + table[i - 1][w - weights[i - 1]])

    # Return the maximum value that can be obtained by filling the knapsack
    return table[n][capacity]


# Example usage
capacity = 50
weights = [10, 20, 30]
values = [60, 100, 120]
n = len(weights)

max_value = knapsack(capacity, weights, values, n)

print("The maximum value that can be obtained by filling the knapsack is:", max_value)
